//
// Created by unknown on 22/05/19.
//

#include "WorkMan.h"

/* -------------------------------------------------------------------------------------------------------/
 *  Create
 * ----------------------------------------------------------------------------------------------------*/
Worker& WorkMan::create(Worker &&config) {
    // create worker using config
    workers.emplace_back(std::move(config));
//    workers.back().setParent(*this);

    // return ref to worker
    return workers.back();
}

/* -------------------------------------------------------------------------------------------------------/
 *  Modify
 * ----------------------------------------------------------------------------------------------------*/
void WorkMan::modify(int worker, Worker& config) {

}

/* -------------------------------------------------------------------------------------------------------/
 *  Get
 * ----------------------------------------------------------------------------------------------------*/

void WorkMan::get(int worker) {

}

/* -------------------------------------------------------------------------------------------------------/
 *  Remove
 * ----------------------------------------------------------------------------------------------------*/

void WorkMan::remove(int worker, bool wait) {

}

/* -------------------------------------------------------------------------------------------------------/
 *  Stop
 * ----------------------------------------------------------------------------------------------------*/

void WorkMan::stop(int worker, bool wait) {
    // stops all workloads or a specific one
}

/* -------------------------------------------------------------------------------------------------------/
 *  Resume
 * ----------------------------------------------------------------------------------------------------*/

void WorkMan::resume(int worker, bool wait) {
    // resumes all workloads or a specific one
}

/* -------------------------------------------------------------------------------------------------------/
 *  Start
 * ----------------------------------------------------------------------------------------------------*/

void WorkMan::start(int worker, bool wait) {
    if (worker < 0) {
        // all workers


    } else {
        // specific worker

    }
}

/* -------------------------------------------------------------------------------------------------------/
 *  Terminate
 * ----------------------------------------------------------------------------------------------------*/

void WorkMan::terminate(int worker) {

}